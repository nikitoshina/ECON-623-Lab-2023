---
title: "Tidy Data"
editor: visual
---
```{r include = F}
library(tidyverse)
knitr::opts_chunk$set(echo = T, warning = F, message = F, error = F)

data_raven <- readr::read_csv("https://raw.githubusercontent.com/nikitoshina/ECON-623-Lab-2023/main/data/mexico_sample_data.csv?token=GHSAT0AAAAAAB5WTPULI26TZP545VNUFQE6Y6O4XVA") %>% select(id, mean_temp_celsius,gender, pr_correct, tr_correct, ch_tournament, ch_correct) 
```

Wide data and long data are two common forms of data organization.

Wide data, also known as unstacked data, is organized so that each row represents an individual unit of observation and each column represents a variable. This format is often used when the number of variables is relatively small and they are not related to one another in a hierarchical manner.

For example, a wide data table containing information about a group of students might have one row for each student and columns for their name, age, gender, and test scores.

On the other hand, long data, also known as stacked data, is organized so that each row represents a single observation of a variable, and each column represents the variable and an identifier of the unit of observation. This format is often used when the number of variables is large or they are related to one another in a hierarchical manner.

For example, a long data table containing information about the test scores of a group of students might have one row for each student-test combination, with columns for the student's name, the test name and the score.

Choosing between wide and long format depends on the specific analysis and visualization needs. Wide format is more suited for simple exploratory analysis, while long format is more suited for complex analysis and visualization. We will take advantage of long and wide data in visualization section.

## `pivot_longer()`
A common problem is a dataset where column names are not names of variables, but *value* of a variable. This is true for `pr_correct`, `tr_correct`, `ch_correct` as the column names represent name of the `game` variable, the values in the columns represent number of correct answers, and each row represents two observations, not one.

To tidy a dataset, we need to pivot the offending columns into a new pair of variables. To carry out the operation we need to supply:

1. The columns whose names are values, not variables -- columns we want to pivot. Here `pr_correct`, `tr_correct`, `ch_correct`.
2. The name of the variable to move the column names to. Here `game`. The default `name`.
3. The name of the variable to move the column values to. Here `n_correct`. The default `value`.

```{r}
data_raven %>% 
  pivot_longer(c(pr_correct, tr_correct, ch_correct), names_to = "game", values_to = "n_correct") %>%
  select(id,game,n_correct) %>% 
  head(n = 5)
```

## `pivot_wider()`
`pivot_wider()` is the opposite of `pivot_longer()`. You use it when an observation is scattered across multiple rows. For example, let's have a look at `data_raven_accident`, where gnomes stacked `mean_temp_celsius` and `ch_tournament`. Here an observation is spread across two rows.
```{r echo=FALSE}
data_raven_accident <- data_raven %>% select(id, mean_temp_celsius, ch_tournament) %>% pivot_longer(-id)
```
```{r}
data_raven_accident %>% head(n=5)
```
To tidy this up, we need two parameters:

1. The column to take variable names from. Here, it’s `name`.
2. The column to take values from. Here it’s `value`.

```{r}
data_raven_accident %>% pivot_wider(names_from = name, values_from = value) %>% head(n = 5)
```
It is evident from their names that pivot_wider() and pivot_longer() are inverse functions. pivot_longer() converts wide tables to a longer and narrower format; pivot_wider() converts long tables to a shorter and wider format.


## `tibble()` and `tribble()`
A tibble is a special kind of data frame in R. Tibbles are a modern re-imagining of the data frame, designed to be more friendly and consistent than traditional data frames.

+ Tibbles are similar to data frames in that they can hold tabular data, but they have some key differences:

+ Tibbles display only the first 10 rows by default when printed, making them easier to work with large datasets.

+ Tibbles use a consistent printing format, making it easier to work with multiple tibbles in the same session.

+ Tibbles have a consistent subsetting behavior, making it easier to select columns by name. When printed, the data type of each column is specified.

+ Subsetting a tibble will always return a tibble. You don’t need to use drop = FALSE compared to traditional data.frames.

+ And most importantly, you can have column consisting of lists.

In summary, Tibbles are a more modern and consistent version of data frames, they are less prone to errors and more readable, making them a great choice for data manipulation and exploration tasks.

To make a tibble we can use `tibble()` similar to data.frame()
```{r}
tibble(x = c(1,2,3),
       y = c('one', 'two', 'three'))
```
You can also you `tribble()` for creating a row-wise, readable tibble in R. This is useful for creating small tables of data. **Syntax: tribble (~column1, ~column2)** where, Row column — represents the data in row by row layout.

```{r}
tribble(~x, ~y,
        1, "one",
        2, "two",
        3, "three")
```

## `janitor` Clean Your Data
`janitor` is designed to make the process of cleaning and tidying data as simple and efficient as possible. To learn more about the function check out [this vignette](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html)! If you are interested in making summary tables with `janitior` check [this vignette](https://cran.r-project.org/web/packages/janitor/vignettes/tabyls.html)! 

### `clean_names()`
`clean_names()` is used to clean variable names, particularly those that are read in from Excel files using `readxl::read_excel()` and `readr::read_csv()`. It parses letter cases, separators, and special characters to a consistent format, converts certain characters like "%" to "percent" and "#" to "number" to retain meaning, resolves duplicate names and empty names. It is recommended to call this function every time data is read.

```{r}
# Create a data.frame with dirty names
test_df <- as.data.frame(matrix(ncol = 6))
names(test_df) <- c("camelCase", "ábc@!*", "% of respondents (2009)",
                    "Duplicate", "Duplicate", "")
test_df %>% colnames()
```
```{r}
library(janitor)
test_df %>% clean_names() %>% colnames()
```
### `remove_empty()`
`remove_empty()` removes empty row and columns, especially useful after reading Excel files.
```{r}
test_df2 <- data.frame(numbers = c(1, NA, 3),
                       food = c(NA, NA, NA),
                       letters = c("a", NA, "c"))
test_df2
test_df2 %>%
  remove_empty(c("rows", "cols"))
```

### `remove_constant()`
`remove_constant()` drops columns from a data.frame that contain only a single constant value (with an na.rm option to control whether NAs should be considered as different values from the constant).
```{r}
test_df3 <- data.frame(cool_numbers = 1:3, boring = "the same")
test_df3
test_df3 %>% remove_constant()
```

###`convert_to_date()` and `convert_to_datetime()`
Remember loading data from Excel and seeing `36922.75` instead of dates? Well, `convert_to_date()` and `convert_to_datetime()` will convert this format and other date-time formats to actual dates! If you need more customization check `excel_numeric_to_date()`.
```{r}
convert_to_date(36922.75)
convert_to_datetime(36922.75)
```

###`row_to_names()`
`row_to_names()` is a function that takes the names of variables stored in a row of a data frame and makes them the column names of the data frame. It can also remove the row that contained the names, and any rows above it, if desired.

```{r}
test_df4 <- data.frame(X_1 = c(NA, "Names", 1:3),
                   X_2 = c(NA, "Value", 4:6))
test_df4
row_to_names(test_df4, 2)
```